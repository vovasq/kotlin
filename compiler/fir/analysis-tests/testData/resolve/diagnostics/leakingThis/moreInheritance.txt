FILE: moreInheritance.kt
    public abstract class BaseA : R|kotlin/Any| {
        public constructor(): R|BaseA| {
            super<R|kotlin/Any|>()
        }

        public abstract val a1: R|kotlin/String|
            public get(): R|kotlin/String|

        public abstract val a2: R|kotlin/Int|
            public get(): R|kotlin/Int|

        public final val a3: R|kotlin/Int| = this@R|/BaseA|.R|/BaseA.a1|.R|kotlin/String.length|
            public get(): R|kotlin/Int|

        public open fun kek(): R|kotlin/Int| {
            ^kek this@R|/BaseA|.R|/BaseA.a1|.R|kotlin/String.length|
        }

    }
    public final class DerivedA : R|BaseA| {
        public constructor(a2: R|kotlin/Int|, p1: R|kotlin/String|): R|DerivedA| {
            super<R|BaseA|>()
        }

        public final override val a2: R|kotlin/Int| = R|<local>/a2|
            public get(): R|kotlin/Int|

        public final override val a1: R|kotlin/String|
            public get(): R|kotlin/String| {
                ^ this@R|/DerivedA|.R|/DerivedA.a2|.R|kotlin/Any.toString|()
            }

        init {
            R|<local>/a2|.R|kotlin/Any.toString|()
        }

    }
    public abstract interface I : R|kotlin/Any| {
        public abstract val i1: R|kotlin/String?|
            public get(): R|kotlin/String?|

        public abstract fun call(): R|kotlin/Unit|

        public open fun isOk(): R|kotlin/Boolean| {
            ^isOk Boolean(false)
        }

        public open fun getLen(p: R|kotlin/Int|): R|kotlin/String| {
            ^getLen R|<local>/p|.R|kotlin/Any.toString|()
        }

    }
    private final val SUPER_QUALIFIER: R|anonymous| = object : R|I| {
        private[local] constructor(): R|anonymous| {
            super<R|kotlin/Any|>()
        }

        public[local] final override val i1: R|kotlin/String?|
            public get(): R|kotlin/String?| {
                ^ String(da)
            }

        public[local] final override fun call(): R|kotlin/Unit| {
            lval s: R|kotlin/String| = String(s)
            R|<local>/s|.R|kotlin/String.length|
        }

    }

        private get(): R|anonymous|
    public abstract class BaseK : R|kotlin/Any| {
        public constructor(): R|BaseK| {
            super<R|kotlin/Any|>()
        }

        public abstract val a1: R|kotlin/String|
            public get(): R|kotlin/String|

        public abstract val a2: R|kotlin/Int|
            public get(): R|kotlin/Int|

        public final val a3: R|kotlin/Int| = this@R|/BaseK|.R|/BaseK.kek|()
            public get(): R|kotlin/Int|

        public abstract fun kek(): R|kotlin/Int|

    }
    public abstract class BaseB : R|BaseK| {
        public constructor(): R|BaseB| {
            super<R|BaseK|>()
        }

        public abstract val b2: R|kotlin/String|
            public get(): R|kotlin/String|

    }
    public final class LLL : R|BaseB| {
        public constructor(a2: R|kotlin/Int|, p1: R|kotlin/String|): R|LLL| {
            super<R|BaseB|>()
        }

        public final override val a2: R|kotlin/Int| = R|<local>/a2|
            public get(): R|kotlin/Int|

        public final override val a1: R|kotlin/String|
            public get(): R|kotlin/String| {
                ^ this@R|/LLL|.R|/LLL.a2|.R|kotlin/Any.toString|()
            }

        public final override val b2: R|kotlin/String|
            public get(): R|kotlin/String|

        init {
            R|<local>/a2|.R|kotlin/Any.toString|()
            this@R|/LLL|.R|/LLL.b2| = String(b2)
        }

        public final override fun kek(): R|kotlin/Int| {
            ^kek this@R|/LLL|.R|/LLL.b2|.R|kotlin/String.length|
        }

    }
