FILE: for.kt
    public? final? fun foo(): R|kotlin/Unit| {
        lval <range>: <implicit> = IntegerLiteral(1).rangeTo#(IntegerLiteral(10))
        lval <iterator>: <implicit> = R|<local>/<range>|.iterator#()
        while(R|<local>/<iterator>|.hasNext#()) {
            lval i: <implicit> = R|<local>/<iterator>|.next#()
            println#(i#)
        }

    }
    public? final? fun bar(list: List<String>): R|kotlin/Unit| {
        lval <range>: <implicit> = list#.subList#(IntegerLiteral(0), IntegerLiteral(10))
        lval <iterator>: <implicit> = R|<local>/<range>|.iterator#()
        while(R|<local>/<iterator>|.hasNext#()) {
            lval element: <implicit> = R|<local>/<iterator>|.next#()
            println#(element#)
        }

        lval <range>: <implicit> = list#.subList#(IntegerLiteral(10), IntegerLiteral(20))
        lval <iterator>: <implicit> = R|<local>/<range>|.iterator#()
        while(R|<local>/<iterator>|.hasNext#()) {
            lval element: <implicit> = R|<local>/<iterator>|.next#()
            println#(element#)
        }

    }
    public? final? data class Some : R|kotlin/Any| {
        public? constructor(x: Int, y: Int): R|Some| {
            super<R|kotlin/Any|>()
        }

        public? final? val x: Int = R|<local>/x|
            public? get(): Int

        public? final? val y: Int = R|<local>/y|
            public? get(): Int

        public final fun component1(): <implicit> {
            ^component1 this@R|/Some|.R|/Some.x|
        }

        public final fun component2(): <implicit> {
            ^component2 this@R|/Some|.R|/Some.y|
        }

        public final fun copy(x: Int = this@R|/Some|.R|/Some.x|, y: Int = this@R|/Some|.R|/Some.y|): R|Some| {
        }

    }
    public? final? fun baz(set: Set<Some>): R|kotlin/Unit| {
        lval <range>: <implicit> = set#
        lval <iterator>: <implicit> = R|<local>/<range>|.iterator#()
        while(R|<local>/<iterator>|.hasNext#()) {
            lval <destruct>: <implicit> = R|<local>/<iterator>|.next#()
            lval x: <implicit> = R|<local>/<destruct>|.component1()
            lval y: <implicit> = R|<local>/<destruct>|.component2()
            println#(<strcat>(String(x = ), x#.toString#(), String( y = ), y#.toString#()))
        }

    }
